data structures
consoles
	git bash
	poshgit
poshgit
	posh has branch mini status
git bash
	recognizes hex colors
	append with & to run async
tortoisegit
	bad
config
	global
	local
	git config --global[|--local] -e
global config
	editor
	options
aliases
	git commit|c
	git checkout|co
	git status|s
	etc.
branch
	git branch -f <branch> <commit>
	git branch -v  //verbose
	git branch -vv //more verbose
	remote refs/branches, upstream, fetch
status
	git status -s
	git status -b
diff
	git diff --name-status
	git diff <commit>^! //commit range
checkout
	git checkout . // undo mod'ded files not in stage
	git checkout <commit>
	git checkout <commit> file
	git clean -fd // to remove newly added files and dirs
index
	git difftool //unstaged
	git difftool --staged //staged
	git difftool head //staged+unstaged
why index?
	interactive hunk staging
reset
	git reset --soft // branch pointer
	git reset [--mixed] // removes from staged
	git reset --hard //changes working dir, destructive
stash
	git stash [save "<comment>"] -u
		--keep-index|-k will keep your index in working dir
	git stash [apply|pop] [stash@{<i>}] --index
		--index will preserve your index
		v.11 git stash apply <i> --index
	when to stash?
		create a branch and commit instead //reflog to recover
merge
	git merge branch
	what is a ff merge? when to not ff?
	git merge --no-ff <branch> //forces a merge commit, good for public branches
	git merge --ff-only <branch> //allow only ff
	git merge --abort
	git reset --merge ORIG_HEAD //to undo a merge (even successful one)
	git merge branch1 branch2 //octopus strategy
		git merge branch1 //recursive strategy
		git merge branch2 
	git merge --squash branch // bring all changes from branch as non-merge commit
	git difftool [--ours|theirs] file
	git merge -s ours dev //ignore work on dev just merge but take all of current branch
rebase
	git rebase master
	git stash save -u "<comment>"
	rebase -i <commit> //head~3
	// transplant dev2 (created from dev1) onto master
	git rebase --onto
		git rebase --onto master dev1 dev2
--dry-run|-n
	push
	merge has a different version
		git merge --no-commit --no-ff branch
	commit
"-" for last branch
	shortcut for @{-1}
	git co -
	git merge -
grep
	git grep -e "--name-status"
	git grep -e "--name-status" -- '*.c' '*.h'
	git log --grep '^Fix' -5
	git log --grep '\.$' -5
	git log --grep '\.$' --invert-grep -3
	git log --author=rmandvikar -10
	git log --all --pretty="%H##boo##%s" | awk -F "##boo##" 'length($2) > 52 {print $1}' | xargs git show -s --pretty="%h %s - %an"
blame
	git blame -L12,-1 [-L12,+2] file.ext
rev-list
	git rev-list --all
	git rev-list <branch>
	git rev-list --left-right --count @...master
reflog
	git reflog //shows results after commands
bisect
	git bisect start
	git bisect bad [head]
	git bisect good <commit>
	git bisect good/bad
	git bisect reset
shortlog
	git shortlog --summary --count
commit message format
	subject, body else only subject
	body: say why instead of what.
log
	git log dev..master // only on master
	git log dev...master // on dev and master from merge-base
	git log dev master // on dev and master
	git diff dev..master // same as dev master, diff of dev and master (compare tips)
	git diff dev...master // diff shows what's only on master
colors
git log --all --pretty="%H##hack##%s" \
| awk -F "##hack##" 'length($2) > 52 {print $1}' \
| xargs git show -s --pretty="%h %s - %an"
-- line endings:

as is:
autocrlf false
	windows: mixed line endings, or whole file changes
	others: default option

c/i lf, c/o crlf
autocrlf true
	windows: works. but may not for us due to tests. 

autocrlf input
	others: perfect


